syntax = "proto2";

package appengine;

message APIRequest {
  enum Encoding {
    BINARY = 0;
    JSON = 1;
  }
  required string api_package = 1;
  required string call = 2;

  optional bytes pb = 3 [ctype=CORD];
  optional Encoding request_encoding = 6 [default = BINARY];
  optional Encoding response_encoding = 7 [default = BINARY];

  required string security_ticket = 4;
}

message APIResponse {
  enum ERROR {
    OK = 0;
    CALL_NOT_FOUND = 1;
    PARSE_ERROR = 2;
    SECURITY_VIOLATION = 3;
    OVER_QUOTA = 4;
    REQUEST_TOO_LARGE = 5;
    CAPABILITY_DISABLED = 6;
    FEATURE_DISABLED = 7;
    BAD_REQUEST = 8;
    BUFFER_ERROR = 9;
    RESPONSE_TOO_LARGE = 10;
    CANCELLED = 11;
    REPLAY_ERROR = 12;
    RPC_ERROR = 13;
  }

  enum RpcError {
    DEADLINE_EXCEEDED = 1;
    APPLICATION_ERROR = 2;
    UNKNOWN_ERROR = 3;
  }

  required int32 error = 1;
  optional string error_message = 2;

  // If error == RPC_ERROR, rpc_error, rpc_application_error, and
  // error_message describe the rpc error.
  optional RpcError rpc_error = 6;

  // Only set when error = RPC_ERROR and rpc_error = APPLICATION_ERROR.
  optional int32 rpc_application_error = 7;

  // Returns the number of megacycles of CPU time used by this API
  // call, if any.
  optional int64 cpu_usage = 4 [default = 0];

  optional bytes pb = 3 [ctype=CORD];
}
