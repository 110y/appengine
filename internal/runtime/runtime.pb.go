// Code generated by protoc-gen-go.
// source: google.golang.org/appengine/internal/runtime/runtime.proto
// DO NOT EDIT!

/*
Package appengine is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/appengine/internal/runtime/runtime.proto

It has these top-level messages:
	APIRequest
	APIResponse
*/
package appengine

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type APIRequest_Encoding int32

const (
	APIRequest_BINARY APIRequest_Encoding = 0
	APIRequest_JSON   APIRequest_Encoding = 1
)

var APIRequest_Encoding_name = map[int32]string{
	0: "BINARY",
	1: "JSON",
}
var APIRequest_Encoding_value = map[string]int32{
	"BINARY": 0,
	"JSON":   1,
}

func (x APIRequest_Encoding) Enum() *APIRequest_Encoding {
	p := new(APIRequest_Encoding)
	*p = x
	return p
}
func (x APIRequest_Encoding) String() string {
	return proto.EnumName(APIRequest_Encoding_name, int32(x))
}
func (x *APIRequest_Encoding) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(APIRequest_Encoding_value, data, "APIRequest_Encoding")
	if err != nil {
		return err
	}
	*x = APIRequest_Encoding(value)
	return nil
}

type APIResponse_ERROR int32

const (
	APIResponse_OK                  APIResponse_ERROR = 0
	APIResponse_CALL_NOT_FOUND      APIResponse_ERROR = 1
	APIResponse_PARSE_ERROR         APIResponse_ERROR = 2
	APIResponse_SECURITY_VIOLATION  APIResponse_ERROR = 3
	APIResponse_OVER_QUOTA          APIResponse_ERROR = 4
	APIResponse_REQUEST_TOO_LARGE   APIResponse_ERROR = 5
	APIResponse_CAPABILITY_DISABLED APIResponse_ERROR = 6
	APIResponse_FEATURE_DISABLED    APIResponse_ERROR = 7
	APIResponse_BAD_REQUEST         APIResponse_ERROR = 8
	APIResponse_BUFFER_ERROR        APIResponse_ERROR = 9
	APIResponse_RESPONSE_TOO_LARGE  APIResponse_ERROR = 10
	APIResponse_CANCELLED           APIResponse_ERROR = 11
	APIResponse_REPLAY_ERROR        APIResponse_ERROR = 12
	APIResponse_RPC_ERROR           APIResponse_ERROR = 13
)

var APIResponse_ERROR_name = map[int32]string{
	0:  "OK",
	1:  "CALL_NOT_FOUND",
	2:  "PARSE_ERROR",
	3:  "SECURITY_VIOLATION",
	4:  "OVER_QUOTA",
	5:  "REQUEST_TOO_LARGE",
	6:  "CAPABILITY_DISABLED",
	7:  "FEATURE_DISABLED",
	8:  "BAD_REQUEST",
	9:  "BUFFER_ERROR",
	10: "RESPONSE_TOO_LARGE",
	11: "CANCELLED",
	12: "REPLAY_ERROR",
	13: "RPC_ERROR",
}
var APIResponse_ERROR_value = map[string]int32{
	"OK":                  0,
	"CALL_NOT_FOUND":      1,
	"PARSE_ERROR":         2,
	"SECURITY_VIOLATION":  3,
	"OVER_QUOTA":          4,
	"REQUEST_TOO_LARGE":   5,
	"CAPABILITY_DISABLED": 6,
	"FEATURE_DISABLED":    7,
	"BAD_REQUEST":         8,
	"BUFFER_ERROR":        9,
	"RESPONSE_TOO_LARGE":  10,
	"CANCELLED":           11,
	"REPLAY_ERROR":        12,
	"RPC_ERROR":           13,
}

func (x APIResponse_ERROR) Enum() *APIResponse_ERROR {
	p := new(APIResponse_ERROR)
	*p = x
	return p
}
func (x APIResponse_ERROR) String() string {
	return proto.EnumName(APIResponse_ERROR_name, int32(x))
}
func (x *APIResponse_ERROR) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(APIResponse_ERROR_value, data, "APIResponse_ERROR")
	if err != nil {
		return err
	}
	*x = APIResponse_ERROR(value)
	return nil
}

type APIResponse_RpcError int32

const (
	APIResponse_DEADLINE_EXCEEDED APIResponse_RpcError = 1
	APIResponse_APPLICATION_ERROR APIResponse_RpcError = 2
	APIResponse_UNKNOWN_ERROR     APIResponse_RpcError = 3
)

var APIResponse_RpcError_name = map[int32]string{
	1: "DEADLINE_EXCEEDED",
	2: "APPLICATION_ERROR",
	3: "UNKNOWN_ERROR",
}
var APIResponse_RpcError_value = map[string]int32{
	"DEADLINE_EXCEEDED": 1,
	"APPLICATION_ERROR": 2,
	"UNKNOWN_ERROR":     3,
}

func (x APIResponse_RpcError) Enum() *APIResponse_RpcError {
	p := new(APIResponse_RpcError)
	*p = x
	return p
}
func (x APIResponse_RpcError) String() string {
	return proto.EnumName(APIResponse_RpcError_name, int32(x))
}
func (x *APIResponse_RpcError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(APIResponse_RpcError_value, data, "APIResponse_RpcError")
	if err != nil {
		return err
	}
	*x = APIResponse_RpcError(value)
	return nil
}

type APIRequest struct {
	ApiPackage       *string              `protobuf:"bytes,1,req,name=api_package" json:"api_package,omitempty"`
	Call             *string              `protobuf:"bytes,2,req,name=call" json:"call,omitempty"`
	Pb               []byte               `protobuf:"bytes,3,opt,name=pb" json:"pb,omitempty"`
	RequestEncoding  *APIRequest_Encoding `protobuf:"varint,6,opt,name=request_encoding,enum=appengine.APIRequest_Encoding,def=0" json:"request_encoding,omitempty"`
	ResponseEncoding *APIRequest_Encoding `protobuf:"varint,7,opt,name=response_encoding,enum=appengine.APIRequest_Encoding,def=0" json:"response_encoding,omitempty"`
	SecurityTicket   *string              `protobuf:"bytes,4,req,name=security_ticket" json:"security_ticket,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *APIRequest) Reset()         { *m = APIRequest{} }
func (m *APIRequest) String() string { return proto.CompactTextString(m) }
func (*APIRequest) ProtoMessage()    {}

const Default_APIRequest_RequestEncoding APIRequest_Encoding = APIRequest_BINARY
const Default_APIRequest_ResponseEncoding APIRequest_Encoding = APIRequest_BINARY

func (m *APIRequest) GetApiPackage() string {
	if m != nil && m.ApiPackage != nil {
		return *m.ApiPackage
	}
	return ""
}

func (m *APIRequest) GetCall() string {
	if m != nil && m.Call != nil {
		return *m.Call
	}
	return ""
}

func (m *APIRequest) GetPb() []byte {
	if m != nil {
		return m.Pb
	}
	return nil
}

func (m *APIRequest) GetRequestEncoding() APIRequest_Encoding {
	if m != nil && m.RequestEncoding != nil {
		return *m.RequestEncoding
	}
	return Default_APIRequest_RequestEncoding
}

func (m *APIRequest) GetResponseEncoding() APIRequest_Encoding {
	if m != nil && m.ResponseEncoding != nil {
		return *m.ResponseEncoding
	}
	return Default_APIRequest_ResponseEncoding
}

func (m *APIRequest) GetSecurityTicket() string {
	if m != nil && m.SecurityTicket != nil {
		return *m.SecurityTicket
	}
	return ""
}

type APIResponse struct {
	Error        *int32  `protobuf:"varint,1,req,name=error" json:"error,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	// If error == RPC_ERROR, rpc_error, rpc_application_error, and
	// error_message describe the rpc error.
	RpcError *APIResponse_RpcError `protobuf:"varint,6,opt,name=rpc_error,enum=appengine.APIResponse_RpcError" json:"rpc_error,omitempty"`
	// Only set when error = RPC_ERROR and rpc_error = APPLICATION_ERROR.
	RpcApplicationError *int32 `protobuf:"varint,7,opt,name=rpc_application_error" json:"rpc_application_error,omitempty"`
	// Returns the number of megacycles of CPU time used by this API
	// call, if any.
	CpuUsage         *int64 `protobuf:"varint,4,opt,name=cpu_usage,def=0" json:"cpu_usage,omitempty"`
	Pb               []byte `protobuf:"bytes,3,opt,name=pb" json:"pb,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *APIResponse) Reset()         { *m = APIResponse{} }
func (m *APIResponse) String() string { return proto.CompactTextString(m) }
func (*APIResponse) ProtoMessage()    {}

const Default_APIResponse_CpuUsage int64 = 0

func (m *APIResponse) GetError() int32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return 0
}

func (m *APIResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *APIResponse) GetRpcError() APIResponse_RpcError {
	if m != nil && m.RpcError != nil {
		return *m.RpcError
	}
	return APIResponse_DEADLINE_EXCEEDED
}

func (m *APIResponse) GetRpcApplicationError() int32 {
	if m != nil && m.RpcApplicationError != nil {
		return *m.RpcApplicationError
	}
	return 0
}

func (m *APIResponse) GetCpuUsage() int64 {
	if m != nil && m.CpuUsage != nil {
		return *m.CpuUsage
	}
	return Default_APIResponse_CpuUsage
}

func (m *APIResponse) GetPb() []byte {
	if m != nil {
		return m.Pb
	}
	return nil
}

func init() {
	proto.RegisterEnum("appengine.APIRequest_Encoding", APIRequest_Encoding_name, APIRequest_Encoding_value)
	proto.RegisterEnum("appengine.APIResponse_ERROR", APIResponse_ERROR_name, APIResponse_ERROR_value)
	proto.RegisterEnum("appengine.APIResponse_RpcError", APIResponse_RpcError_name, APIResponse_RpcError_value)
}
